import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import plotutils as pu
import argparse
from sys import exit

parser = argparse.ArgumentParser(
        description="Calculate whether clumps persisted for a given window"
        )
parser.add_argument("surfdenscsv", 
        help="CSV with surface density information, generated by calcsurfdens.py",
        )
parser.add_argument("windowsize",
        help="Size of the averaging window in timesteps",
        type=int,
        )
parser.add_argument("--start_t",
        help=("Starting time step for averaging window, default is first in "
            "the surface density csv. -1 sets the window to the latest possible section"),
        type=int,
        default=None,
        )
parser.add_argument("--plots",
        help=("Output plots in the given location for each of the steps, as in figure A1. "
            "Requres a specified position file"),
        )
parser.add_argument("--posfile",
        help="CSV with position information, generated by calcsurfdens.py",
        )

args = parser.parse_args()

if args.plots is not None and args.posfile is None:
    print("Error: plot output requires specifying a position values file")
    exit(1)

t_vals, surf_dens_arr = pu.load_surfdenscsv(args.surfdenscsv)

if args.start_t >= 0:
    if args.start_t < t_vals[0]:
        print(f"Error: starting timestep is before first timestep {args.t_vals[0]}")
        exit(1)
    if args.start_t >= t_vals[-1] + args.windowsize:
        print(f"Error: stopping timestep is after last timestep {args.t_vals[-1]}")
        exit(1)
else:
    args.start_t = t_vals[-1] - args.windowsize
    if args.start_t not in t_vals:
        print((f"Error: computed start_t ({int(args.start_t)}) not in given datafile. "
                "Please set manually."))
        exit(1)

# select only timesteps within the window
window_mask = (t_vals >= args.start_t) & (t_vals <= args.start_t + args.windowsize)
t_vals = t_vals[window_mask]
surf_dens_arr = surf_dens_arr[window_mask]

print(f"Using data from {len(surf_dens_arr)} timesteps.")

mean_surf_dens = np.mean(surf_dens_arr, axis=0) # mean surface density over time

sorted_mean_surf_dens = np.sort(mean_surf_dens)[::-1]

print(np.cumsum(sorted_mean_surf_dens))
print(sum(sorted_mean_surf_dens))
cumulative_mean_surf_dens = np.cumsum(sorted_mean_surf_dens) / sum(sorted_mean_surf_dens)

def Q(z, jlimit=1000):
    return 2 * sum([(-1)**(j-1) * np.exp(-2*(z*j)**2) for j in range(1, jlimit+1)])

cumulative_uniform_dist = np.linspace(0., 1., num=len(cumulative_mean_surf_dens))
# p = Q(D * sqrt(n))
p = Q(
        max(np.abs(cumulative_mean_surf_dens - cumulative_uniform_dist)) * 
            np.sqrt(len(cumulative_mean_surf_dens))
            )

# this is the plotting code, only run if the argument is provided
if args.plots is not None:

    plt.rcParams.update({
        "text.usetex" : True,
        "font.size" : 12,
        })

    posvals = np.loadtxt(args.posfile, delimiter=",")

    ### plot surface densities of first and last timesteps ###
    first_color = "blue"
    last_color = "green"
    fig_surf_dens, ax_surf_dens = plt.subplots()

    ax_surf_dens.set_xlim(-0.1, 0.1)
    ax_surf_dens.set_ylim(0., 1.)

    ax_surf_dens.tick_params(direction="in")

    ax_surf_dens.set_xlabel("$x$")
    ax_surf_dens.set_ylabel(r"$\Sigma_p$")

    ax_surf_dens.plot(
            posvals,
            surf_dens_arr[0],
            color=first_color,
            label=f"$t$ = {int(t_vals[0])}"
            )
    ax_surf_dens.plot(
            posvals,
            surf_dens_arr[-1],
            color=last_color,
            label=f"$t$ = {int(t_vals[-1])}"
            )

    ax_surf_dens.legend()
    
    fig_surf_dens.set_tight_layout(True)

    fig_surf_dens.savefig(f"{args.plots}/1_surf_dens.png")

    ### plot mean surface density over the window ###
    mean_color = "blue"
    fig_mean_surf_dens, ax_mean_surf_dens = plt.subplots()

    ax_mean_surf_dens.set_xlim(-0.1, 0.1)
    ax_mean_surf_dens.set_ylim(0., 1.)

    ax_mean_surf_dens.tick_params(direction="in")

    ax_mean_surf_dens.set_xlabel("$x$")
    ax_mean_surf_dens.set_ylabel(r"$ \left< \Sigma_p \right>_t $")

    ax_mean_surf_dens.plot(
            posvals,
            mean_surf_dens,
            color=mean_color,
            )

    fig_mean_surf_dens.set_tight_layout(True)

    fig_mean_surf_dens.savefig(f"{args.plots}/2_mean_surf_dens.png")

    ### plot sorted mean surface density ###
    sorted_color = "blue"
    fig_sorted_mean_surf_dens, ax_sorted_mean_surf_dens = plt.subplots()

    cell_indices = list(range(len(sorted_mean_surf_dens)))

    ax_sorted_mean_surf_dens.set_xlim(min(cell_indices), max(cell_indices))
    ax_sorted_mean_surf_dens.set_ylim(0., 1.)

    ax_sorted_mean_surf_dens.tick_params(direction="in")

    ax_sorted_mean_surf_dens.set_xlabel("Sorted cell index")
    ax_sorted_mean_surf_dens.set_ylabel(r"$ \left< \Sigma_p \right>_t $")

    ax_sorted_mean_surf_dens.plot(
            cell_indices,
            sorted_mean_surf_dens,
            color=sorted_color,
            )

    fig_sorted_mean_surf_dens.set_tight_layout(True)
    fig_sorted_mean_surf_dens.savefig(f"{args.plots}/3_sorted_mean_surf_dens.png")

    ### plot cumulative distribution ###
    data_color = "red"
    uniform_color = "blue"
    fig_cumulative_mean_surf_dens, ax_cumulative_mean_surf_dens = plt.subplots()

    ax_cumulative_mean_surf_dens.set_xlim(min(cell_indices), max(cell_indices))
    ax_cumulative_mean_surf_dens.set_ylim(0., 1.)

    ax_cumulative_mean_surf_dens.tick_params(direction="in")

    ax_cumulative_mean_surf_dens.set_xlabel("Sorted cell index")
    ax_cumulative_mean_surf_dens.set_ylabel(r"$ \left< \Sigma_p \right>_t $")

    ax_cumulative_mean_surf_dens.plot(
            cell_indices,
            cumulative_mean_surf_dens,
            color=data_color,
            label="data",
            )
    ax_cumulative_mean_surf_dens.plot(
            cell_indices,
            cumulative_uniform_dist,
            color=uniform_color,
            label="uniform",
            linestyle="--",
            )

    fig_cumulative_mean_surf_dens.set_tight_layout(True)
    fig_cumulative_mean_surf_dens.savefig(f"{args.plots}/4_cumulative_mean_surf_dens.png")

##########################################################

tag = None
if p >= 0.45:
    tag = "unlikely" 
if 0.25 <= p < 0.45:
    tag = "somewhat likely" 
if 0.10 <= p < 0.25:
    tag = "likely" 
if p < 0.10:
    tag = "very likely" 

print(f"p = {p} (clumping is {tag})")
